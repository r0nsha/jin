use std.option.Option
use std.str.StrBuf

pub let i8_min: i8 = -128
pub let i8_max: i8 = 127
 
pub let i16_min: i16 = -32_768
pub let i16_max: i16 = 32_767
 
pub let i32_min: i32 = -2_147_483_648
pub let i32_max: i32 = 2_147_483_647
 
pub let i64_min: i64 = -9_223_372_036_854_775_808
pub let i64_max: i64 = 9_223_372_036_854_775_807

# TODO: Consider 32bit platforms!
pub let int_min: int = i64_min
pub let int_max: int = i64_max

pub let u8_min: u8 = 0
pub let u8_max: u8 = 255

pub let u16_min: u16 = 0
pub let u16_max: u16 = 65_535

pub let u32_min: u32 = 0
pub let u32_max: u32 = 4_294_967_295

pub let u64_min: u64 = 0
pub let u64_max: u64 = 18_446_744_073_709_551_615

# TODO: Consider 32bit platforms!
pub let uint_min: uint = u64_min
pub let uint_max: uint = u64_max

pub type Format {
	decimal
}

pub fn base(f: Format) -> uint = match f {
	Format.decimal -> 10
}

# TODO: make this private
pub type IntFormatter(pub num: uint, pub is_neg: bool, pub format: Format)

pub fn fmt(self: IntFormatter, buf: &mut StrBuf) = {
	let base = self.format.base()

	if self.num == 0 {
		buf.push('0')	
		return
	}

	let mut num = self.num

	for if num > 0 {
		match char.from_digit(u32(num % base), u32(base)) {
			Option.some(ch) -> buf.push(ch)
			_ -> () # TODO: or_panic
		}
		num /= base
	}

	if self.is_neg {
		buf.push('-')
	}
}

fn extern "c" printf(fmt: *u8, ..) -> i32
