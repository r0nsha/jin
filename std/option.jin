use std.panicking.panic

type Option*[T] {
	some(value: T)
	none
}

fn get*[T](self: Option[T]) -> T =
	match self {
		Option.some(v) -> v
		Option.none -> panic("called `get` on a `none` value")
	}

fn is-some*[T](self: &Option[T]) -> bool =
	match self {
		Option.some(_) -> true
		Option.none -> false
	}

fn is-none*[T](self: &Option[T]) -> bool =
	!self.is-some()

fn map*[A, B](self: Option[A], f: fn(A) -> B) -> Option[B] =
	match self {
		Option.some(v) -> Option.some(f(v))
		Option.none -> Option.none
	}

fn map-or*[A, B](self: Option[A], default: B, f: fn(A) -> B) -> B =
	match self {
		Option.some(v) -> f(v)
		Option.none -> default
	}

