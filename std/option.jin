pub type Option[T] {
	Some(value: T)
	None
}

# pub fn get[T](self: Option[T]) -> Bool =
# 	match self {
# 		Option.Some(v) -> v
# 		Option.None -> panic("called `Option.get` on a `None` value")
# 	}

pub fn is_some[T](self: &Option[T]) -> Bool =
	match self {
		Option.Some(_) -> true
		Option.None -> false
	}

pub fn is_none[T](self: &Option[T]) -> Bool =
	!self.is_some()

pub fn map[A, B](self: Option[A], f: fn(A) -> B) -> Option[B] =
	match self {
		Option.Some(v) -> Option.Some(f(v))
		Option.None -> Option.None
	}

pub fn map_or[A, B](self: Option[A], default: B, f: fn(A) -> B) -> B =
	match self {
		Option.Some(v) -> f(v)
		Option.None -> default
	}

