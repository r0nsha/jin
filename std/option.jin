import std.panicking.panic

type Option*[T] {
    Some(value: T)
    None
}

fn or-panic*[T](self: Option[T]) -> T =
    match self {
        Option.Some(v) -> v
        Option.None -> panic("called `or-panic` on a `None` value")
    }

fn is-some*[T](self: &Option[T]) -> bool =
    match self {
        Option.Some(_) -> true
        Option.None -> false
    }

fn is-none*[T](self: &Option[T]) -> bool =
    !self.is-some()

fn map*[A, B](self: Option[A], f: fn(A) -> B) -> Option[B] =
    match self {
        Option.Some(v) -> Option.Some(f(v))
        Option.None -> Option.None
    }

fn map-or*[A, B](self: Option[A], default: B, f: fn(A) -> B) -> B =
    match self {
        Option.Some(v) -> f(v)
        Option.None -> default
    }

