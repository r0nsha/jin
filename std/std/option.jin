type Option*[a] {
	some(value: a),
	none
}

//fn get*[a](self: Option[a]) bool =
//	match self {
//		Option.some(v) -> v,
//		Option.none -> panic("called `Option.get` on a `none` value")
//	}

fn is_some*[a](self: &Option[a]) bool =
	match self {
		Option.some(_) -> true,
		Option.none -> false
	}

fn is_none*[a](self: &Option[a]) bool =
	!self.is_some()

fn map*[a, b](self: Option[a], f: fn(a) b) Option[b] =
	match self {
		Option.some(v) -> Option.some(f(v)),
		Option.none -> Option.none 
	}

fn map_or*[a, b](self: Option[a], default: b, f: fn(a) b) b =
	match self {
		Option.some(v) -> f(v),
		Option.none -> default
	}

