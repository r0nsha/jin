type Option*[T] {
	Some(value: T)
	None
}

//fn get*[T](self: Option[T]) -> bool =
//	match self {
//		Some(v) -> v
//		None -> panic("called `Option.get` on a `None` value")
//	}

fn is_some*[T](self: &Option[T]) -> bool =
	match self {
		Some(_) -> true
		None -> false
	}

fn is_none*[T](self: &Option[T]) -> bool =
	!self.is_some()

fn map*[A, B](self: Option[A], f: fn(A) -> B) -> Option[B] =
	match self {
		Some(v) -> Option.Some(f(v))
		None -> Option.None
	}

fn map_or*[A, B](self: Option[A], default: B, f: fn(A) -> B) -> B =
	match self {
		Some(v) -> f(v)
		None -> default
	}

