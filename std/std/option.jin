type Option*[T] {
	some(value: T)
	none
}

//fn get*[T](self: Option[T]) -> bool =
//	match self {
//		.some(v) -> v
//		.none -> panic("called `Option.get` on a `none` value")
//	}

fn is_some*[T](self: &Option[T]) -> bool =
	match self {
		.some(_) -> true
		.none -> false
	}

fn is_none*[T](self: &Option[T]) -> bool =
	!self.is_some()

fn map*[A, B](self: Option[A], f: fn(A) -> B) -> Option[B] =
	match self {
		.some(v) -> Option.some(f(v))
		.none -> Option.none
	}

fn map_or*[A, B](self: Option[A], default: B, f: fn(A) -> B) -> B =
	match self {
		.some(v) -> f(v)
		.none -> default
	}

