import std.(c, io)

// TODO: Use lower-level `open` C api with flags
// TODO: Add an API for custom file opening with `OpenOptions`
fn open*(path: &str) -> io.Result[File] = {
    let pathname = unsafe as[_](path.as-bytes().ptr)
    // TODO: cross-platform open
    let fd = unsafe c.open(pathname, c.O_RDONLY, 0)

    if fd != -1 {
	Result.Ok(File(fd))
    } else {
	// TODO: cross-platform errno
	let errno = unsafe (c.__errno_location().0)
	Result.Err(io.Error.from-os-error(errno))
    }
}

type RawFd = c.c-int
type File*(fd: RawFd)

fn read-to-end*(self: &File) -> io.Result[Array[u8]] = {
    let mut a = Array.new()
    // TODO:
    Result.Ok(a)
}

fn read*(self: &File, buf: &mut []u8) -> io.Result[uint] = {
    // TODO:
    Result.Ok(0)
}
