import std.option.Option

fn extern printf(fmt: *u8, ..) i32

type LinkedList[a](head: Option[Node[a]])
type Node[a](data: a, next: Option[Node[a]])

fn new_linked_list[a]() LinkedList[a] = LinkedList(head: Option.none)

fn insert[a](self: &mut LinkedList[a], data: a) unit = {
  let mut new_node = Node(data, Option.none)
  let m = &mut new_node
  let old_head = self.head
  self.head = Option.some(new_node)
  m.next = old_head
}

fn print(self: &LinkedList[int]) unit = {
  let mut curr = &self.head

  printf("[".ptr)

  loop {
    match curr {
      Option.some(v) -> {
        printf("%d, ".ptr, v.data)
        curr = v.next
      },
      Option.none -> break
    }
  }

  printf("]\n".ptr)
}

fn main() unit = {
  let list = new_linked_list()  
  list.insert(1)
  list.print()
}
