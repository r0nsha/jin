fn extern "c" printf(fmt: *u8, ..) -> i32

type Move()
type Enum {
	Foo
	Bar
}
type HasMove { Has(m: Move) }
type HasRef { Has(r: &Move) }
type MoveRef {
	M(m: Move)
	R(r: &Move)
}
type Poly[T] { A(a: T) }
type PolyRef[T] {
	M(m: T)
	R(r: &T)
}

fn main() = {
	// Copy
	let enum = Enum.Foo
	let enum2 = enum
	let enum3 = enum

	// Move
	let hm = HasMove.Has(Move())
	let hmref = &hm
	let hm2 = hm

	// Ref
	let hr = HasRef.Has(match &hm2 { Has(m) -> m })

	// Move + Ref
	let mrr = MoveRef.R(match &hm2 { Has(m) -> m })
	// let mrm = MoveRef.M(match hm2 { Has(m) -> m }) // (Ref error: Because this is defined after refs)

	// Poly (Copy)
	let pc = Poly.A(1)
	let pc2 = pc
	let pc3 = pc

	// Poly (Move)
	let pm = Poly.A(Move())
	let pmref = &pm
	let pm2 = pm

	// Poly (Ref)
	let pr = Poly.A(match &pm2 { A(m) -> m })

	// Poly (Move + Ref)
	let prr = PolyRef.R(match &pm2 { A(m) -> m })
	// let prm = PolyRef.M(match pm2 { A(m) -> m }) // (Ref error: Because this is defined after refs)
}
