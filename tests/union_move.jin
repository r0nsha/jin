fn extern "c" printf(fmt: *u8, ..) -> i32

type Move()
type Enum {
	foo
	bar
}
type HasMove { has(m: Move) }
type HasRef { has(r: &Move) }
type MoveRef {
	m(m: Move)
	r(r: &Move)
}
type Poly[T] { a(a: T) }
type PolyRef[T] {
	m(m: T)
	r(r: &T)
}

fn main() = {
	# Copy
	let enum = Enum.foo
	let enum2 = enum
	let enum3 = enum

	# Move
	let hm = HasMove.has(Move())
	let hmref = &hm
	let hm2 = hm

	# Ref
	let hr = HasRef.has(match &hm2 { HasMove.has(m) -> m })

	# Move + Ref
	let mrr = MoveRef.r(match &hm2 { HasMove.has(m) -> m })
	# let mrm = MoveRef.m(match hm2 { HasMove.has(m) -> m }) # (Ref error: Because this is defined after refs)

	# Poly (Copy)
	let pc = Poly.a(1)
	let pc2 = pc
	let pc3 = pc

	# Poly (Move)
	let pm = Poly.a(Move())
	let pmref = &pm
	let pm2 = pm

	# Poly (Ref)
	let pr = Poly.a(match &pm2 { Poly.a(m) -> m })

	# Poly (Move + Ref)
	let prr = PolyRef.r(match &pm2 { Poly.a(m) -> m })
	# let prm = PolyRef.m(match pm2 { a(m) -> m }) # (Ref error: Because this is defined after refs)
}
