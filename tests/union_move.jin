fn extern "c" printf(fmt: *u8, ..) -> i32

type Move()
type Enum { foo, bar }
type HasMove { has(m: Move) }
type HasRef { has(r: &Move) }
type Poly[T] { a(a: T) }
// TODO: Poly (copy)
// TODO: Poly (move)
// TODO: Poly (ref)
// TODO: Move + Ref
// TODO: Poly (move T + ref to T)

fn main() = {
	// Copy
	let enum = Enum.foo
	let enum2 = enum
	let enum3 = enum

	// Move
	let hm = HasMove.has(Move())
	let hmref = &hm
	let hm2 = hm

	// Ref
	let hr = HasRef.has(match &hm2 { HasMove.has(m) -> m })

	// Poly (Copy)
	let pc = Poly.a(1)
	let pc2 = pc
	let pc3 = pc
}
