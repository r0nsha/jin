import inner

fn extern printf(fmt: *u8, ..) i32

fn main() unit = {
	match_vars()
	match_unit()
	match_bool(true)
	match_bool(false)

	match_int(42)
	match_int(-3)
	match_int(69)

	match_uint(42)
	match_uint(3)
	match_uint(69)

	match_str("foo")
	match_str("bar")
	match_str("hadas")

	match_types()
}

fn match_vars() unit = {
	match true {
		mut x -> {
			x = false
			printf("x = %d\n".ptr, x)
			{}
		},
		_ -> {
			// ignored...
		},
	}
}


fn match_unit() unit = {
	match {} {
		{} -> printf("matched unit!\n".ptr),
		_ -> 1, // This branch is unreachable
	}
}

fn match_bool(value: bool) unit = {
	printf("value = %s\n".ptr, match value {
		true -> "true",
		false -> "false",
		x -> "unreachable..."
	})
}

fn match_int(value: int) unit = {
	match value {
		42 -> printf("i'm the answer\n".ptr),
		-3 -> printf("i'm -3\n".ptr),
		x -> printf("value is %d\n".ptr, x),
	}
}

fn match_uint(value: uint) unit = {
	match value {
		42 -> printf("i'm still the answer\n".ptr),
		3 -> printf("i'm still 3\n".ptr),
		x -> printf("and value is %d\n".ptr, x),
	}
}

fn match_str(value: str) unit = {
	match value {
		"foo" -> printf("i'm 'foo'\n".ptr),
		"bar" -> printf("i'm 'bar'\n".ptr),
		x -> printf("str is '%s'\n".ptr, x.ptr),
	}
}

type Box(value: int)
type Bag(a: Box, b: Box)

fn match_types() unit = {
	let box = Box(1)

	let _: unit = match box {
		Box(1) -> { printf("it's 1!\n".ptr) },
		Box(v) -> print(v),
		Box(_) -> {}, // unreachable
		_ -> {}, // unreachable
	}

	let bag = Bag(Box(1), Box(3))

	let _: unit = match bag {
		Bag(Box(1), _) -> { printf("a: 1, b: _\n".ptr) },
		Bag(b: Box(3), a: Box(a)) -> { printf("a: %d, b: 3 (named)\n".ptr, a) },
		Bag(Box(a), Box(3)) -> { printf("a: %d, b: 3\n".ptr, a) },
		Bag(a, ..) -> move(a),
		_ -> {}, // unreachable
	}

	match inner.get(1) {
		//inner.Inner(field: 1) -> {}, // Error: match private field
		inner.Inner(..) -> {}, // Ok, field isn't used
	}
}

fn print(box: &Box) unit = {
	printf("Box(%d)\n".ptr, box.value)
}

fn print(bag: &Bag) unit = {
	match bag {
		Bag(a, b) -> {
			printf("Bag(a: Box(%d), b: Box(%d))\n".ptr, a.value, b.value)
		}
	}
}

fn print(value: int) unit = {
	printf("%d\n".ptr, value)
}

fn move(box: Box) unit = {}
