use raylib.bindings.{*}

fn extern "c" printf(fmt: *u8, ..) -> i32
fn extern "c" atan2f(y: f32, x: f32) -> f32
fn extern "c" cosf(arg: f32) -> f32
fn extern "c" sinf(arg: f32) -> f32

pub fn run() = unsafe {
	let screen_width = 800
	let screen_height = 450

	InitWindow(screen_width, screen_height, "raylib - following eyes".data)
	SetTargetFPS(60)

	let half_screen_height = f32(screen_height / 2)
	let mut sclera_left_pos = Vector2(f32(screen_width / 2) - 100.0, half_screen_height)
	let mut sclera_right_pos = Vector2(f32(screen_width / 2) + 100.0, half_screen_height)
	let sclera_radius = 80.0

	let mut iris_left_pos = Vector2(f32(screen_width / 2) - 100.0, half_screen_height)
	let mut iris_right_pos = Vector2(f32(screen_width / 2) + 100.0, half_screen_height)
	let iris_radius = 24.0

	for if !WindowShouldClose() {
		iris_left_pos = GetMousePosition()
		iris_right_pos = GetMousePosition()

		if !CheckCollisionPointCircle(iris_left_pos, sclera_left_pos, sclera_radius - 20.0) {
			let dx = iris_left_pos.x - sclera_left_pos.x
			let dy = iris_left_pos.y - sclera_left_pos.y

			let angle = atan2f(dy, dx)

			let dxx = {sclera_radius - iris_radius} * cosf(angle)
			let dyy = {sclera_radius - iris_radius} * sinf(angle)

			iris_left_pos.x = sclera_left_pos.x + dxx
			iris_left_pos.y = sclera_left_pos.y + dyy
		}

		if !CheckCollisionPointCircle(iris_right_pos, sclera_right_pos, sclera_radius - 20.0) {
			let dx = iris_right_pos.x - sclera_right_pos.x
			let dy = iris_right_pos.y - sclera_right_pos.y

			let angle = atan2f(dy, dx)

			let dxx = {sclera_radius - iris_radius} * cosf(angle)
			let dyy = {sclera_radius - iris_radius} * sinf(angle)

			iris_right_pos.x = sclera_right_pos.x + dxx
			iris_right_pos.y = sclera_right_pos.y + dyy
		}

		BeginDrawing()
		ClearBackground(RAYWHITE)
		DrawCircleV(sclera_left_pos, sclera_radius, LIGHTGRAY)
		DrawCircleV(iris_left_pos, iris_radius, BROWN)
		DrawCircleV(iris_left_pos, 10.0, BLACK)
		DrawCircleV(sclera_right_pos, sclera_radius, LIGHTGRAY)
		DrawCircleV(iris_right_pos, iris_radius, DARKGREEN)
		DrawCircleV(iris_right_pos, 10.0, BLACK)
		DrawFPS(10, 10)
		EndDrawing()
	}

	CloseWindow()
}
