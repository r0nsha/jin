fn extern "c" printf(fmt: ptr[u8], ..) -> i32

type Num(field: int)
type Wrapper(num: Num)
type Duo(n1: Num, n2: Num)
type WrapperDuo(w1: Wrapper, w2: Wrapper)

fn main() = {
    // Drop temporary values
    Num(1)
    Wrapper(Num(1))

    // Drop named values
    let n = Num(1)
    let w = Wrapper(Num(1))

    // Moving into specialized functions
    drop-poly(Num(1)) // Should be dropped at `drop-poly`
    drop-poly(1) // Shouldn't be dropped at `drop-poly`

    // drop on assignment
    let mut n = Num(1)
    n = Num(2)

    // drop in for & break
    let mut i: uint = 10
    for {
        let n = Num(1)
        unsafe printf("i = %d\n".ptr, i)
        i -= 1

        if i == 0 {
            let n2 = Num(1)
            break
        }
    }

    let cond = Wrapper(Num(1)) // Conditionally drop value
    if false {
        let x = cond
    }

    let duo = Duo(Num(1), Num(2)) // Partial move drop (only a & c should be dropped)
    let copy = duo.n1.field // Ok (copy type)
    let a = duo.n1
    let b = duo.n2 // Ok (n1 was moved)
    //let c = duo.n1 // Error!

    let d2 = Duo(Num(1), Num(2)) // Partial & conditional move drop
    if true {
        let d2n1 = d2.n1
    } else {
        let d2n2 = d2.n2
    }

    let wd = WrapperDuo(Wrapper(Num(1)), Wrapper(Num(2))) // Partial & conditional move drop (nested structure)
    if true {
        let wd1 = wd.w1
    } else {
        let wd2 = wd.w2
    }
}

fn drop-poly[T](arg: T) = {}
