import std

fn extern "c" printf(fmt: *u8, ..) i32

fn main() unit = {
	ints()
	boxes()
}

fn ints() unit = {
	let a: [int] = []
	print(&a)

	let mut b: [int] = [:3]
	std.intrinsics.push(&mut b, 3)
	std.intrinsics.push(&mut b, 2)
	std.intrinsics.push(&mut b, 1)
	print(&b)
	let mut b = std.intrinsics.grow(b, 4)
	std.intrinsics.push(&mut b, 0)
	print(&b)
	let mut b = std.intrinsics.grow(b, 8)
	std.intrinsics.push(&mut b, 6)
	std.intrinsics.push(&mut b, 7)
	print(&b)

	let mut c = [1, 2, 3, 4, 5]
	print(&c)
	c.[1] = 69
	printf("old=%d\n".ptr, c.[2] := 42)
	print(&c)
	let c2 = &mut c.[1..3]
	print(&c2)
	std.intrinsics.push(&mut c2, 8)
	std.intrinsics.push(&mut c2, 9)
	print(&c2)
	print(&c)
	print(&c.[..3])
	print(&c.[2..])
	print(&c.[..])
}

fn print(s: &[int]) unit = {
	printf("[".ptr)
	let mut i = 0
	loop if i < s.len {
		printf("%d".ptr, s.[i])
		if i < s.len - 1 {
			printf(", ".ptr)
		}
		i += 1
	}
	printf("], ptr: %p, len: %d, cap: %d\n".ptr, s.ptr, s.len, s.cap)
}

type Box(value: int)

fn boxes() unit = {
	let a = [Box(1), Box(2), Box(3)]
	let b = &a.[0]
	let c = &a.[0]
	let nested = [[Box(1), Box(2)], [Box(3)]]
}
