fn extern printf(fmt: *u8, ..) i32

type Num(field: int)
type Wrapper(num: Num)

fn main() unit = {
	// Ownership checks
	use_after_move()	
	use_after_move_scoped()	
	//move_out_of_global()
	//move_into_loop()
	//copy()

	// Valgrind checks
	//destroy_things()	
}

fn use_after_move() unit = {
	let n = Num(1)	
	let x = n
	//let y = n // Error!
}	

fn use_after_move_scoped() unit = {
	let n = Num(1)	
	let x = n
	if false {
		let y = n // Error!
	}
}	

//fn destroy_things() unit = {
	//Num(1) // Destroy temporary value
	//Wrapper(Num(1)) // Destroy complex temporary value

	//let n = Num(1) // Destroy named value
	//let w = Wrapper(Num(1)) // Destroy complex named value

	//let cond = Num(1) // Conditionally destroy value
	//if false {
	//	let x = cond
	//}

	//let w2 = Wrapper(Num(1)) // Partial move destroy (only w2 should be destroyed)
	//let w2num = w2.num

	//let wcond = Wrapper(Num(1)) // Partial & conditional move destroy (only w2 should be destroyed, conditionally)
	//if true {
	//	let wcondnum = wcond.num
	//}
//}	

//let GLOBAL_NUM = Num(1)

//fn move_out_of_global() unit = {
//	//let x = GLOBAL_NUM // Error!
//}

//fn move_into_loop() unit = {
//	let n = Num(1)
//
//	//loop {
//	//	let x = n // Error!
//	//}
//}

//fn copy() unit = {
//	let n = 1
//	let a = n
//	let b = n // Ok
//}
