fn extern printf(fmt: *u8, ..) i32

type Num(field: int)
type Wrapper(num: Num)

fn main() unit = {
	// Ownership checks
	use_after_move()	
	use_after_move_scoped()	
	move_out_of_global()
	move_into_loop()
	copy()
}

fn use_after_move() unit = {
	let n = Num(1)	
	let x = n
	//let y = n // Error!
}	

fn use_after_move_scoped() unit = {
	let n = Num(1)	
	let x = n
	if false {
		//let y = n // Error!
	}
}	

let GLOBAL_INT = 1
let GLOBAL_NUM = Num(1)

fn move_out_of_global() unit = {
	let x = GLOBAL_INT // Ok
	//let y = GLOBAL_NUM // Error!
}

fn move_into_loop() unit = {
	let mut n = Num(1)

	loop if n.field < 10 {
		n.field += 1
		//let x = n // Error!
	}
}

fn copy() unit = {
	let n = 1
	let a = n
	let b = n // Ok

	let n = Num(1)
	let a = n.field
	let b = n.field // Ok

	let w = Wrapper(Num(1))
	let a = w.num.field
	let b = w.num.field // Ok
}
