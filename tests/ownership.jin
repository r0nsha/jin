fn extern "c" printf(fmt: ptr[u8], ..) -> i32

type Num(field: int)
type Wrapper(num: Num)

fn main() = {
    use-after-move()
    // use-after-move-scoped()
    // move-out-of-global()
    // move-into-for()
    // copy()
    // assign-not-moved()
    // destroy-discarded-values(Num(1))
}

fn use-after-move() = {
    let n = Num(1)
    let x = n
    //let y = n // Error!
}

fn use-after-move-scoped() = {
    let n = Num(1)
    let x = n
    if false {
        //let y = n // Error!
    }
}

let global-int: int = 1
let global-num: Num = Num(1)

fn move-out-of-global() = {
    let x = global-int // Ok
    //let y = global-num // Error!
}

fn move-into-for() = {
    let mut n = Num(1)

    for if n.field < 10 {
        n.field += 1
        //let x = n // Error!
    }
}

fn copy() = {
    let n = 1
    let a = n
    let b = n // Ok

    let n = Num(1)
    let a = n.field
    let b = n.field // Ok

    let w = { Wrapper(Num(1)) }
    let a = w.num.field
    let b = w.num.field // Ok
}

fn assign-not-moved() = {
    //let mut num = Num(1)
    //num.field = 1

    let mut wrapper = Wrapper(Num(1))

    // `wrapper` is NOT marked as moved since this is a `place` expression.
    // also `wrapper.num` is destroyed here. I also added some weird edge cases...
    wrapper.num = Num(2)
    { wrapper }.num = Num(2)
    {
        let x = wrapper
        x
    }.num = Num(2)

    let mut wrapper = Wrapper(Num(1))
    wrapper.num = Num(3) // `wrapper.num` destroyed here
    wrapper.num.field = 2

    let n1 = Num(1)
    let n2 = Num(2)

    let x = if true {
        n1
    } else {
        n2
    }
}

fn destroy-discarded-values(_: Num) = {
    let _ = Num(2)
}
