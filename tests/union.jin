import std.option.(Option)

fn extern "c" printf(fmt: *u8, ..) -> i32

type Box(value: int)

fn main() = {
	// Value constructors
	let a = Option.some(1)
	let b = Option[int].some(1)
	let c = Option.some(value: 2)
	let d: Option[int] = Option.none

	// Pattern matching
	let value = Option.some(1)
	match &value {
		Option.some(1) -> printf("some(1)\n".ptr)
		Option.some(_) -> printf("some(other)\n".ptr)
		Option.none() -> printf("none\n".ptr)
	}

	let o = Option.some(Box(4))

	let mut b = Box(1)
	printf("before match: Box(%d)\n".ptr, b.value)

	match o {
		Option.some(Box(value: 5)) -> printf("some(Box(5))\n".ptr)
		Option.some(x) -> {
			printf("some(%d)\n".ptr, x.value)
			b = x
		}
		Option.none -> printf("none\n".ptr)
	}

	printf("after match: Box(%d)\n".ptr, b.value)

	if Option.some(-1).map_or(false, is_negative) {
		printf("o is negative\n".ptr)
	} else {
		printf("o is not negative\n".ptr)
	}
}

fn is_negative(x: int) -> bool = x < 0
