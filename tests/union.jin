use std.option.Option

fn extern "c" printf(fmt: *u8, ..) -> i32

type Box(value: int)

fn main() = {
	// Value constructors
	let a = Option.Some(1)
	let b = Option[int].Some(1)
	let c = Option.Some(value: 2)
	let d: Option[int] = Option.None

	// Pattern matching
	let value = Option.Some(1)
	match &value {
		Some(1) -> unsafe printf("Some(1)\n".ptr)
		Some(_) -> unsafe printf("Some(other)\n".ptr)
		None() -> unsafe printf("None\n".ptr)
	}

	let o = Option.Some(Box(4))

	let mut b = Box(1)
	unsafe printf("before match: Box(%d)\n".ptr, b.value)

	match o {
		Some(Box(value: 5)) -> unsafe printf("Some(Box(5))\n".ptr)
		Some(x) -> {
			unsafe printf("Some(%d)\n".ptr, x.value)
			b = x
		}
		None -> unsafe printf("None\n".ptr)
	}

	unsafe printf("after match: Box(%d)\n".ptr, b.value)

	if Option.Some(-1).map_or(false, is_negative) {
		unsafe printf("o is negative\n".ptr)
	} else {
		unsafe printf("o is not negative\n".ptr)
	}
}

fn is_negative(x: int) -> bool = x < 0
