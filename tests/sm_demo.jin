fn main() unit = {
	int_types()
	unary()
	arithmetic()
	cmp()
	if_expr()
	variables()
	polymorphism()
	named_args()
	global_vars()
}

fn int_types() unit = {
	let id: i8 = 126
	let promoted = id as i64 + 5555
	let demoted_inferred: i32 = promoted as _
	let demoted_explicit: i16 = { demoted_inferred - 4000 } as _
	let int_to_uint: uint = { 663151 as int } as _
}

fn unary() unit = {
	-48
	!true
	!!false
	!54878
}

fn arithmetic() unit = {
	1 + 2
	3 - 4
	5 * 6
	7 / 8
	9 % 10
}

fn cmp() unit = {
	true && false
	false || true
	100 == 100
	200 != 150
	8 < 7
	42 <= 999
	2 > 1
	264 >= 71
}

fn if_expr() unit = {
	let cond = true
	let result = if cond {
		69
	} else {
		420
	}
}

fn variables() int = {
	let x = 7 // Inferred to `int`
	let y: int = 3 // Explicit type annotation
	let x = 39  // Variables can be shadowed
	x + y
}

fn id[T](x: T) T = {
	x
}

fn polymorphism() unit = {
	// Inferred type arguments
	id(42)
	id(true)

	// Explicit type arguments
	id[int](111)
	id[bool](false)
}

fn add_named(first: int, second: int) int = {
	first + second
}

fn named_args() unit = {
	add_named(first: 1, second: 2)
	add_named(second: 2, first: 1)
	add_named(1, second: 2)
}

let global_answer = 42

fn global_vars() unit = {
	let answer = global_answer
}
