import extern "./foo"

fn extern "c" hello() unit
let extern answer: int

fn extern "c" printf(fmt: *u8, ..) i32
fn extern "c" write(fd: i32, buf: *u8, count: uint) i32

let stdout = 1

fn print(fmt: str) unit = {
	write(stdout, fmt.ptr, fmt.len)
}

fn println(fmt: str) unit = {
	print(fmt)
	print("\n")
}

fn main() unit = {
	println("Hello, World!")
	hello()
	run(print_answer)
	do_add(add, 1, 2)
	printf("num = %d\n".ptr, map(1, id))
}

fn print_answer() unit = {
	printf("The answer is %d\n".ptr, answer)
}

fn add(a: int, b: int) int = {
	a + b
}

fn do_add(f: fn(int, int) int, a: int, b: int) unit = {
	printf("a + b = %d\n".ptr, f(a, b))
}

fn run(f: fn() unit) unit = f()

fn id[a](x: a) a = x

fn map[a, b](val: a, f: fn(a) b) b =
	f(val)
