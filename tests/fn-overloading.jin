mod child

import fn-overloading.child.(*)

fn extern "c" printf(fmt: ptr[u8], ..) -> i32

fn main()
    unsafe printf("Function overload matching:\n".ptr)
    add(int(1), int(1)) // exact int
    add(1, 1) // untyped int matching
    add(8, 13, 9) // matching different arg count
    add(f32(1.0), f32(2.5)) // exact f32
    add(1.0, 2.5) // untyped float matching
    add(5, 2.25) // mixed parameter type matching
    unsafe printf("\n".ptr)

    unsafe printf("Same calls in UFCS style\n".ptr)
    int(1).add(int(1))
    1.add(1)
    8.add(13, 9)
    f32(1.0).add(f32(2.5))
    (1.0).add(2.5)
    5.add(2.25)
    unsafe printf("\n".ptr)

    unsafe printf("Calls with named arguments:\n".ptr)
    named(x: 1) // picks `fn named(x: int)`
    named[int](x: 1) // picks `fn named[a](x: a)`
    named(1, 2) // picks `fn named(x: int, y: int)`
    named(y: 1, x: 2) // picks `fn named(x: int, y: int)`
    named(z: 1) // picks `fn named(z: int)`
    unsafe printf("\n".ptr)

    unsafe printf("Chaining add calls with a print at the end:\n".ptr)
    1.add-one()
        .add-one()
        .add-one()
        .add(3)
    unsafe printf("\n".ptr)

    child.poly[int](1) // picking a module function with type application

fn add-one(x: int) -> int
    x + 1

fn named(x: int)
    unsafe printf("named: x = %d\n".ptr, x)

fn named(x: int, y: int)
    unsafe printf("named: x = %d, y = %d\n".ptr, x, y)

fn named(z: int)
    unsafe printf("named: z = %d\n".ptr, z)

fn named[T](x: T)
    unsafe printf("named[a]: x = %d\n".ptr, x)
