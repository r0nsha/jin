fn main() = {
	int_types()
	unary()
	arithmetic()
	cmp()
	variables()
	nested_fn()
	polymorphism()
	named_args()
}

fn int_types() = {
	fn id(x i8) i8 = x
	id(126)

	fn promote(x i32) i64 = x as i64
	promote(55554)

	fn demote_inferred(x int) i8 = x as _
	demote_inferred(129)

	fn auto_promote(x i16) i32 = x
	auto_promote(4688)

	fn promote_to_signed(x u16) int = x as int
	promote_to_signed(555)

	fn demote_to_unsigned_inferred(x int) u8 = x as _
	demote_to_unsigned_inferred(34)

	fn uint_to_int(x uint) int = x as int
	uint_to_int(663151)
}

fn unary() = {
	fn neg() int = -(48 + 2) as int / 1
	neg()

	fn not() bool = !true
	not()

	# fn bitnot() int = !54878
	# bitnot()
}

fn arithmetic() = {
	1 + 2
	3 - 4
	5 * 6
	7 / 8
	9 % 10
}

fn cmp() = {
	100 == 100
	200 != 150
	8 < 7
	42 <= 999
	2 > 1
	264 >= 71
	5 * 6
	7 / 8
	9 % 10
}

fn variables() int = {
	let x = 39 # Inferred to `int`
	let y int = 3 # Explicit type annotation
	x + y
}

fn nested_fn() = {
	fn foo() = {
		fn bar() = ()
	}

	foo()
}

fn polymorphism() = {
	fn id[t](x t) t = x

	# Inferred type arguments
	id(42)
	id(true)

	# Explicit type arguments
	id[int](111)
	id[bool](false)
}

fn named_args() = {
	fn add(first int, second int) int = first + second
	add(first: 1, second: 2)
	add(second: 2, first: 1)
	add(1, second: 2)
}
