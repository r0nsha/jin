fn main() = {
	arithmetic()
	cmp()
	nested_fn()
	polymorphism()
	int_types()
}

fn arithmetic() = {
	1 + 2
	3 - 4
	5 * 6
	7 / 8
	9 % 10
}

fn cmp() int = {
	100 == 100
	200 != 150
	8 < 7
	42 <= 999
	2 > 1
	264 >= 71
	5 * 6
	7 / 8
	9 % 10
	return 5
}

fn nested_fn() = {
	fn foo() = {
		fn bar() = ()
	}

	foo()
}

fn polymorphism() = {
	fn id[T](x T) T = x

	# Inferred type arguments
	id(42)
	id(true)

	# Explicit type arguments
	id[int](111)
	id[bool](false)
}

fn int_types() = {
	fn id(x i8) i8 = x
	id(126)

	fn promote(x i32) i64 = x.[i64]
	promote(55554)

	fn demote_inferred(x int) i8 = x.[_]
	demote_inferred(129)
}
